#BlueJ class context
comment0.target=Listings
comment0.text=\r\n\ Class\ Listings\ -\ Performs\ and\ stores\ every\ manipulation\ of\ the\ dataset.\r\n\r\n\ A\ filter-chain\ ensures\ a\ reduction\ of\ the\ amount\ of\ performed\ filter-calculations.\r\n\ The\ filters\ usually\ changed\ the\ least\ are\ first\ in\ the\ chain\ to\ not\ be\ filtered\ for\ again\ when\ filters\ at\ the\ end\ of\ the\ chain\ are\ changed.\r\n\ The\ order\ of\ the\ filter\ is\:\r\n\ Booking\ data\ -->\ Price\ Range\ -->\ Boroughs\ -->\ Checkbox\ filters\ (Wifi,...)\r\n\r\n\ The\ filters\ are\ invoked\ by\ the\ previous\ filters\ or\ by\ a\ public\ changeXY\ method.\r\n\r\n\ @version\ 01-04-2021\r\n\ @author\ Valentin\ Magis,\ Vandad\ Vafai\ Tabrizi,\ Barnabas\ Szalai\r\n
comment1.params=originalListings
comment1.target=Listings(java.util.ArrayList)
comment1.text=\r\n\ Create\ a\ new\ Listings\ object.\ Initializes\ the\ different\ lists\ so\ the\ user\ can\ add\ any\ filter\ at\ the\ beginning.\r\n\ @param\ originalListings\ The\ original\ listings\ loaded\ from\ the\ csv\ file.\r\n
comment10.params=
comment10.target=void\ filterPriceRange()
comment10.text=\r\n\ Second\ filter\ in\ the\ filter-chain\r\n\ Separate\ method\ so\ the\ user\ can\ change\ price\ range\ at\ any\ time\ without\ having\ filter\ for\ booking\ data\ again.\r\n
comment11.params=selectedBoroughs
comment11.target=void\ changeSelectedBoroughs(java.util.ArrayList)
comment11.text=\r\n\ Change\ the\ boroughs\ filtered\ for.\ The\ filter\ is\ only\ activated\ when\ a\ borough\ is\ selected\ and\ the\ user\ searches\ for\ the\ properties.\r\n\ Other\ panels\ in\ the\ mainframecontroller\ should\ not\ be\ affected\ by\ this\ filter.\r\n\ @param\ selectedBoroughs\ The\ boroughs\ to\ be\ filtered\ for.\r\n
comment12.params=
comment12.target=void\ filterBoroughs()
comment12.text=\r\n\ Filters\ the\ list\ for\ the\ searched\ boroughs.\r\n
comment13.params=checkedList
comment13.target=void\ setActiveFilters(java.util.ArrayList)
comment13.text=\r\n\ Set\ the\ active\ filters\ with\ a\ list.\r\n\ @param\ checkedList\ The\ active\ filters.\r\n
comment14.params=filter
comment14.target=void\ toggleActiveFilter(FilterNames)
comment14.text=\r\n\ Add/Remove\ a\ filter\ depending\ if\ it\ is\ in\ the\ list\ of\ active\ filters\ or\ not.\r\n\ @param\ filter\ The\ filter\ to\ be\ added/removed\r\n
comment15.params=
comment15.target=void\ filterForActiveFilters()
comment15.text=\r\n\ Filter\ for\ the\ filters\ that\ have\ been\ specified\ by\ the\ user.\ (Wifi,\ Pool,\ Private\ room,\ Superhost)\r\n
comment16.params=
comment16.target=java.util.HashSet\ getActiveFilters()
comment16.text=\r\n\ Get\ the\ checkbox\ filters\ that\ have\ been\ activated.\r\n\ @return\ The\ activated\ filters.\r\n
comment17.params=list\ filterString
comment17.target=java.util.ArrayList\ filterAmenity(java.util.ArrayList,\ java.lang.String)
comment17.text=\r\n\ Filter\ the\ given\ list\ by\ an\ amenity.\r\n\ @param\ list\ The\ list\ to\ be\ filtered.\r\n\ @param\ filterString\ The\ amenity\ to\ be\ filtered\ by.\r\n\ @return\ A\ new\ list\ only\ containing\ the\ properties\ which\ supply\ the\ specified\ amenity.\r\n
comment18.params=list
comment18.target=java.util.ArrayList\ filterSuperHost(java.util.ArrayList)
comment18.text=\r\n\ A\ method\ which\ filters\ houses\ that\ are\ hosted\ by\ a\ super\ host.\r\n\ @param\ list\ The\ list\ to\ be\ filtered.\r\n\ @return\ A\ new\ list\ only\ containing\ superhosts.\r\n
comment19.params=list
comment19.target=java.util.ArrayList\ filterPrivateRoom(java.util.ArrayList)
comment19.text=\r\n\ A\ method\ which\ filters\ houses\ that\ are\ private.\r\n\ @param\ list\ The\ list\ to\ be\ filtered.\r\n\ @return\ A\ new\ list\ only\ containing\ private\ rooms.\r\n
comment2.params=
comment2.target=java.util.ArrayList\ getFilteredListings()
comment2.text=\r\n\ Get\ current\ result\ of\ all\ filter\ operations.\r\n\ @return\ The\ result\ as\ an\ ArrayList\r\n
comment20.params=arrayToSearch\ element
comment20.target=AirbnbListing\ binarySearch(java.util.ArrayList,\ java.lang.String)
comment20.text=\r\n\ Binary\ Search\ with\ ID\ in\ an\ arrayList.\ Utilizing\ the\ fact\ that\ the\ loaded\ csv\ file\ is\ ordered\ by\ ids.\r\n\ @param\ arrayToSearch\ The\ array\ to\ be\ searched\ for\ the\ element.\r\n\ @param\ element\ The\ element\ to\ be\ searched\ for\ in\ the\ array.\r\n\ @return\ The\ Airbnblisting\ if\ found,\ otherwise\ null.\r\n
comment21.params=
comment21.target=java.util.ArrayList\ getListingsFilteredByBookingData()
comment21.text=\r\n\ A\ method\ which\ helps\ us\ for\ the\ test\ class.\r\n\ @return\ the\ list\ filtered\ by\ the\ filterBookingData\r\n
comment22.params=
comment22.target=java.util.ArrayList\ getListingsFilteredByPrice()
comment22.text=\r\n\ A\ method\ which\ helps\ us\ for\ the\ test\ class.\r\n\ @return\ the\ list\ filtered\ by\ the\ filterPriceRange\r\n
comment23.params=
comment23.target=java.util.ArrayList\ getListingsFilteredBySelectedBoroughs()
comment23.text=\r\n\ A\ method\ which\ helps\ us\ for\ the\ test\ class.\r\n\ @return\ the\ list\ filtered\ by\ the\ filterSelectedBoroughs\r\n
comment24.params=
comment24.target=java.util.ArrayList\ getListingsFilteredByCheckboxes()
comment25.params=
comment25.target=int\ getActiveFilterSize()
comment25.text=\r\n\ Helper\ method\ for\ the\ Unit\ Test.\r\n\ @return\ \ The\ size\ of\ the\ active\ filter\ hash\ set.\r\n
comment3.params=
comment3.target=java.util.ArrayList\ getOriginalListings()
comment3.text=\r\n\ Get\ the\ original\ listings\ loaded\ at\ the\ beginning.\r\n\ @return\ The\ original\ listings.\r\n
comment4.params=
comment4.target=javafx.collections.ObservableList\ getObservableFilteredListings()
comment4.text=\r\n\ Returns\ an\ observable\ list\ which\ is\ used\ for\ displaying\ content\ in\ e.g.\ a\ tableview.\r\n\ @return\ The\ result\ as\ an\ ObservableList\r\n
comment5.params=bookingData
comment5.target=void\ changeBookingData(BookingData)
comment5.text=\r\n\ Change\ the\ booking\ data\ filter\ for\ it.\r\n\ This\ is\ the\ top\ filter\ of\ the\ filter-chain\ because\ it\ is\ expected\ to\ be\ changed\ the\ least.\r\n\ @param\ bookingData\ The\ booking\ data\ the\ user\ has\ entered.\r\n
comment6.params=
comment6.target=void\ filterBookingData()
comment6.text=\r\n\ Filter\ for\ entered\ booking\ data.\ Uses\ to\ original\ listings\ to\ avoid\ loss\ of\ data.\r\n\ Checked\ values\ are\:\ Minimum\ and\ maximum\ nights,\ number\ of\ guests,\ availability\ according\ to\ the\ database.\r\n
comment7.params=checkIn\ checkOut
comment7.target=java.util.ArrayList\ filterOfflineDates(java.time.LocalDate,\ java.time.LocalDate)
comment7.text=\r\n\ Filter\ for\ the\ properties\ which\ have\ been\ booked\ by\ other\ users\ in\ the\ specified\ timeframe.\r\n\ Uses\ the\ database\ or\ offline\ generated\ data.\r\n\ @param\ checkIn\ The\ checkin\ date\ (inclusive)\r\n\ @param\ checkOut\ The\ checkout\ date\ (inclusive)\r\n
comment8.params=checkIn\ checkOut
comment8.target=java.util.ArrayList\ filterDBDates(java.time.LocalDate,\ java.time.LocalDate)
comment8.text=\r\n\ Filter\ for\ the\ properties\ which\ have\ been\ booked\ by\ other\ users\ in\ the\ specified\ timeframe.\r\n\ Uses\ the\ database\ or\ online\ database.\r\n\ @param\ checkIn\ The\ checkin\ date\ (inclusive)\r\n\ @param\ checkOut\ The\ checkout\ date\ (inclusive)\r\n
comment9.params=minPrice\ maxPrice
comment9.target=void\ changePriceRange(int,\ int)
comment9.text=\r\n\ Change\ the\ price\ range\ being\ applied.\r\n\ @param\ minPrice\ The\ minimum\ price\ the\ user\ wants\ to\ find\ properties\ for.\r\n\ @param\ maxPrice\ The\ maximum\ price\ the\ user\ wants\ to\ find\ properties\ for.\r\n\ @throws\ InvalidParameterException\ If\ a\ given\ price\ is\ below\ 0\ or\ the\ min\ is\ not\ smaller\ than\ the\ max.\r\n
numComments=26
